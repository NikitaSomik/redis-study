1. Rename alias Redis to LRedis(or how convenient for you) in app.php
2. In databases.php redis.client change to predis.
3. php artisan config:cache && php artisan cache:clear

set - установить ключ, значение
get - достать по ключу
exists - проверка по ключу, есть ли такой ключ
flushall - удалить все записи

set bat 'Hello' EX 20 - сохрани это значение на 20сек

getset foo 'World' - верни предыдущее и установи новое значение(сначало покажет старое и заменит на новое), атомарная операция

append foo ' world' - добавляет ещё символы(напрю слово). Возвращает (integer) кол-во символов в строке

keys * - показывает все ключи(нельзя использовать эту команду ибо затратна и медленная), есть другая более оптимизированная команда

Атомарные операции increment & decrement интерпритирует как числа, внутри оно хранится все равно как строка

incr foo - возвращает (integer) кол-во(счетчик)
decr foo

-------------------------------------------------------
Redis - это БД, очень быстрая, где данные хранятся в памяти, но при этом имеет персистентное хранилище на диске.
Персистентное хранилище является репозиторием, в котором могут храниться управляемые объекты.
Данные сохраяются на диск.
Логирование данных.
В оперативной памяти.
Это БД, которая одновременно явл. и value хранилищем, хранилищем сложных структур данных, сервером очередей, службой подписки сообщений.
Redis обычно используют для кэш, либо меж процессные взаимодействия.
Redis поддерживает:
 - сложные копмлексные типы данных в Memcached их просто напросто нет.
 - сервер сообщений

Асинхронная репликация позволяет почти неограниченно масштабировать Redis.

 - PHP может хранить данные сессий в Redis.
   Это дает нам увеличение производительности и
   отсутствие блокировки.
 - Кэширование данных.
 - Чаты и системы обмена сообщенияи.
 - Различные очереди задач.
 - Многовенно сортируемые "таблицы лидеров"

Основные сложные типы данных:
 - множества
 - списки
 - упорядоченные множества
 - hash table (они же объекты)

Hash table - redis позволяет по ключу сохранять не только строки но и пары вида ключ - значения. В php это ассоциативные массивы.

HSET person1 name 'Vasya'
HSET person1 age 19
HGET person1 age
HGETALL person1 - отдаст ассоц. массив
HVAL person1 - покажет все значения вашей хэш таблицы
HKEYS person1 - покажет все ключи вашей хэш таблицы

-------------------------------------------------------

Множества - это неупорядоченный набор значений.
Множества создаются с помощью:
 - SADD persons 'Vasya'
 - SADD persons 'Petya' возвратит (integer) 1

SMEMERS persons - покажет все значеиня входящие в множества persons

SADD another 'Petya' 'Ivan', (integer) 2

SCARD - кординальное число. Сколько элементов в множестве находятся.

SCARD persons - (integer) 3

SUNION persons another - объединение разных множест

SDIF persons another - с 1ого множества вычитаем 2е. Возвращаются значения с первого, которых нет во 2м.

SINTER another persons - пересечение, то есть какие элементы есть общие и там и там.

SPOP persons - она возвращает и удаляет случайный элемент множества.

-------------------------------------------------------

Списки - это последовательность значений, упорядоченных по порядку их создания.

LPUSH - добавление значения в начало.
LPUSH mylist 'one' - (integer) 1

LRANGE mylist 0 1 - 'one' . 2й параметр кол-во или отступ сзади до последнего.
LRANGE mylist 0 -1 - получение всего списка.

RPUSH mylist 'two' - (integer) 2 уже значения.
RPUSH mylist 'three'

LRANGE mylust 0 -1 - покажет:
   'one'
   'two'
   'three'

LPOP mylist - 'one'

LRANGE mylust 0 -1 -  покажет:
   'two'
   'three'

RPOP mylist - забрало 'three'

LRANGE mylust 0 -1 -  покажет:
   'two'

LLEN mylist - list length(длина списка)

Очередь
Создаем hash map c каким-то сложным значением, ключик запомнили. Добавили этот ключик hash map в list, получилась очередь.
Некий другой сервис читает из очереди ключ, читает hash map, получает данные из очереди.

Z - буква, которая отвечает за упорядоченное множества.
ZADD - команда добавление значения в упорядоченное множества.
ZADD persons 1980(какое то число) 'Vasya'
ZADD persons 1990(какое то число) 'Petya'
ZADD persons 1985(какое то число) 'Olya'

ZRANGE persons 0 -1
'Vasya'
'Olya'
'Petya'

ZRANGE persons 0 -1 WITHSCORES - выдача в упорядоченным виде и порядковое число выдааст. Это для того, чтобы было легко вставить в середину.
'Vasya'
'1980'
'Olya'
'1985'
'Petya'
'1990'


Лексико-графическое сравнение 2 > 11


-------------------------------------------------------


Транзакции в Redis это не те транзакции, которые в MySQL.
Транзакции в Redis это возможность начать запись команд с помощью команды MULTI. Множества команд, выполняющихся, как одна команда.
MULTI - это переход в режим набор коман, когда они не исполняются, а просто ждет.

INCR foo - QUEUED
DECR bar - QUEUED

QUEUED - сохранено в очереди.

EXEC - выполнились обе команды, сохраненные в транзакцию.
(integer) 1
(integer) -1

DISCARD - отмена запуска транзакций.

-------------------------------------------------------

        Механизм подсписок Pub-Sub

Redis можно использовать как сервер сообщений.
Publish - публикация
SUBSCRIBE - подписка

Publish news 'how are you?'
SUBSCRIBE news

-------------------------------------------------------

DB::connection()->enableQueryLog()
$store = DB::getQueryLog()








